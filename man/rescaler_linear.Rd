% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rescaler.R
\name{rescaler_linear}
\alias{rescaler_linear}
\alias{rescaler_bezier}
\title{Rescaler functions}
\usage{
rescaler_linear(x0, x1)

rescaler_bezier(luv, n = 21)
}
\arguments{
\item{x0}{\code{numeric} value to correspond with \code{x = 0}}

\item{x1}{\code{numeric} value to correspond with \code{x = 1}}

\item{luv}{\code{matrix} of LUV coordinates, control-points for Bézier spline.}

\item{n}{\code{numeric} number of equally-spaced Bézier points to calculate}
}
\value{
A function with S3 class \code{cpath_rescaler}.
}
\description{
Use this function to rescale a palette function, for example: clip a certain part
of it.
}
\details{
A rescaler function:
\itemize{
\item must accept input between zero and one.
\item must provide an output between zero and one.
\item the output must to vary monotonically with the input.
}

Use \code{rescaler_linear()} create a new palette-function that uses part
of the range of an existing palette-function.

Use \code{rescaler_bezier()} to rescale a Bézier palette-function to be more
perceptually uniform. This uses fits a spline to equally-spaced points on
the colorpath. The Bézier function carries some optimizations, so it may
take a few seconds to run.
}
\examples{
  # Linear rescaler
  rlin <- rescaler_linear(0.25, 0.75)

  # print for a preview
  print(rlin)

  # evaluate
  rlin(c(0, 0.5, 1))

  # Bezier rescaler
  rbez <- rescaler_bezier(mat_luv_blues)
  # print for a preview
  print(rbez)

  # evaluate
  rbez(c(0, 0.5, 1))

}
