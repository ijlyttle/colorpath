% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/palette.R
\name{pth_new_hue_surface}
\alias{pth_new_hue_surface}
\alias{pth_new_chroma_trajectory}
\title{Create surfaces and trajectories}
\usage{
pth_new_hue_surface(hue, lum = c(0, 100))

pth_new_chroma_trajectory(chroma, lum)
}
\arguments{
\item{hue}{\code{numeric} values for hue (degrees), input values are \strong{not}
constrained to \verb{0 <= hue < 360}.}

\item{lum}{\code{numeric} values for luminance}

\item{chroma}{\code{numeric} values for chroma.}
}
\value{
\describe{
\item{\code{pth_new_hue_surface()}}{\code{function} with S3 class \code{pth_hue_surface}:
for each given value of luminance \verb{0 <= lum <= 100}, returns a value for
hue \verb{0 <= hue < 360}.}
\item{\code{pth_new_chroma_trajectory()}}{\code{function} with S3 class
\code{pth_chroma_trajectory}: for each given value \verb{0 <= x <= 1}, returns a
set of luminance and chroma values as matrix.}
}
}
\description{
The central idea of this package is to create sequential palettes by
projecting a chroma trajectory onto a hue surface. Use these functions to
build the surfaces and trajectories.

These functions themselves return functions.

The function \code{pth_new_hue_surface()} takes one or two values of \code{hue} and two
values of \code{lum}. It returns a function that returns \code{hue} as a linear function
of \code{lum}.

The function \code{pth_new_chroma_trajectory()} takes an equal number of \code{lum}
and \code{chroma} values. These serve as control points for a BÃ©zier curve.
It returns a function that given input values \verb{0 <= x <= 1}, returns
a matrix with as many rows as input values; \code{lum} and \code{chroma} are the
columns.

One thing to keep in mind when designing a trajectory: although it is a good
thing to keep the trajectory within the gamut, it is not necessary
(or perhaps not even desirable) to keep the control points within the gamut.
}
\examples{
 # create surfaces
 # provide single value of hue for constant
 sfc <- pth_new_hue_surface(270)
 sfc(c(0, 50, 100))

 # provide two values of hue to correspond to luminance values
 sfc <- pth_new_hue_surface(c(220, 270))
 sfc(c(0, 50, 100))

 # provide other values for luminance, if you like
 sfc <- pth_new_hue_surface(c(220, 270), lum = c(25, 75))
 sfc(c(0, 25, 50, 75, 100))

 # create a trajectory
 traj <-
   pth_new_chroma_trajectory(chroma = c(0, 100, 0), lum = c(20, 50, 80))
 traj(seq(0, 1, by = 0.1))

}
